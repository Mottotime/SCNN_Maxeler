/**
 * Document: Manager Compiler Tutorial (maxcompiler-manager-tutorial.pdf)
 * Chapter: 2      Example: 3      Name: Command Stream
 * MaxFile name: CmdStream
 * Summary:
 *     Manager design that connects the kernel's input and output streams to
 *     LMem. These LMem streams are controlled by command streams generated by the
 *     kernel.
 */
package cmdstream;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class CmdStreamManager extends CustomManager {

	private static final String KERNEL_NAME = "CmdStreamKernel";
	private static final CPUTypes TYPE = CPUTypes.INT32;

	CmdStreamManager(EngineParameters engineParameters) {
		super(engineParameters);
		KernelBlock k = addKernel(new CmdStreamKernel(makeKernelParameters(KERNEL_NAME)));
		debug.setDebugLevel(new DebugLevel(){{setHasStreamStatus(true);}});
		DFELink fromcpu = addStreamFromCPU("fromcpu");
		DFELink tocpu = addStreamToCPU("tocpu");

		DFELink tolmem = addStreamToOnCardMemory("tolmem",MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);
		DFELink fromlmem = addStreamFromOnCardMemory("fromlmem",MemoryControlGroup.MemoryAccessPattern.LINEAR_1D);

		tolmem <== fromcpu;
		tocpu <== fromlmem;

		DFELink inB = addStreamFromOnCardMemory("inB",k.getOutput("BcmdStream"));
		DFELink inA = addStreamFromOnCardMemory("inA",k.getOutput("AcmdStream"));

		k.getInput("inA") <== inA;
		k.getInput("inB") <== inB;

		DFELink oData = addStreamToOnCardMemory("oData",k.getOutput("OcmdStream"));
		oData <== k.getOutput("oData");
	}

	private static EngineInterface interfaceWrite(String name) {
		EngineInterface ei = new EngineInterface(name);

		InterfaceParam size  = ei.addParam("size", TYPE);
		InterfaceParam start = ei.addParam("start", TYPE);
		InterfaceParam sizeInBytes = size * TYPE.sizeInBytes();

		ei.setStream("fromcpu", TYPE, sizeInBytes );
		ei.setLMemLinear("tolmem", start * TYPE.sizeInBytes(), sizeInBytes);
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	// reads the data back to the CPU from the LMem
	private static EngineInterface interfaceRead(String name) {
		EngineInterface ei = new EngineInterface(name);

		InterfaceParam size  = ei.addParam("size", TYPE);
		InterfaceParam start = ei.addParam("start", TYPE);
		InterfaceParam sizeInBytes = size * TYPE.sizeInBytes();

		ei.setLMemLinear("fromlmem", start * TYPE.sizeInBytes(), sizeInBytes);
		ei.setStream("tocpu", TYPE, sizeInBytes);
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	private static EngineInterface interfaceDefault() {
		EngineInterface ei = new EngineInterface();

		InterfaceParam N    = ei.addParam("N", TYPE);
		InterfaceParam burstSize = ei.addParam("burstSize", TYPE);
		ei.setTicks(KERNEL_NAME, N);

		ei.setScalar(KERNEL_NAME, "totalBursts", (N*(TYPE.sizeInBytes()))/burstSize);
		ei.setScalar(KERNEL_NAME, "wordsPerBurst", burstSize/(TYPE.sizeInBytes()));

		ei.setLMemInterruptOn("oData");
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	public static void main(String[] args) {
		CmdStreamManager m = new CmdStreamManager(new EngineParameters(args));
		m.createSLiCinterface(interfaceRead("readLMem"));
		m.createSLiCinterface(interfaceWrite("writeLMem"));
		m.createSLiCinterface(interfaceDefault());

		m.build();
	}
}
