/**
 * Document: Manager Compiler Tutorial (maxcompiler-manager-tutorial.pdf)
 * Chapter: 2      Example: 3      Name: Command Stream
 * MaxFile name: CmdStream
 * Summary:
 *     Computes the sum of the two input streams and sends it to an output
 *     stream. Also generates the three custom memory command streams needed to
 *     control the LMem connected to these streams.
 */
package cmdstream;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix.SignMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class CmdStreamKernel extends Kernel {

	CmdStreamKernel(KernelParameters parameters, int vectorSize, int maxNeuronNum) {
		super(parameters);

		// we should pass the bit width as parameter instead of maxNeuronNum

		DFEVar tick = control.count.simpleCounter(32);
		debug.simPrintf("TICK: %d: ", tick);

		DFEFix bramType = dfeFixOffset(16, -8, SignMode.TWOSCOMPLEMENT); // use fix to save the cycle and resource.
		DFEFix uintType = dfeUInt(32);
		DFEFix addressType = dfeUInt(16); // this is fixed for vectorSize.

		DFEVar v_threshold = constant.var(bramType, 1.0);
		// vectorSize is the branch number
		DFEVar neuronNum = io.scalarInput("neuronNum", uintType);
		DFEVar imageSize = io.scalarInput("imageSize", uintType); // mapWidth^2
		DFEVar classNum = io.scalarInput("calssNum", uintType);

		Memory<DFEVar> V = mem.alloc(bramType, maxNeuronNum);

		// gather need to be a vector of memory blocks

		//Memory<DFEVar> gather1 = mem.alloc(bramType, maxNeuronNum);
		//Memory<DFEVar> gather2 = mem.alloc(bramType, maxNeuronNum);
		List<Memory<DFEVar>> gather1 = new ArrayList<Memory<DFEVar>>();
		for(int i = 0; i < vectorSize; i++){
			gather1.add(mem.alloc(bramType, maxNeuronNum / vectorSize));
		}
		//array.add(e);
		//array.get(index);

		DFEVectorType<Memory> gatherVectorType = new DFEVectorType<>();
		DFEVectorType<DFEVar> gatherVectorType = new DFEVectorType<DFEVar>();

		Memory<DFEVar> rowInTable = mem.alloc(dfeUInt(32), maxNeuronNum);
		rowInTable.mapToCPU("rowInTable");

		// Here we set the bit_width as 16, fixed, according to the vectorSize.
		Count.Params paramsForNeuron = control.count.makeParams( MathUtils.bitsToAddress(maxNeuronNum) )
										.withMax(neuronNum.cast(addressType));
		Counter neuron_counter = control.count.makeCounter(paramsForNeuron);

		DFEVar neuron_idx = neuron_counter.getCount();
		DFEVar is_input_layer = neuron_idx.cast(uintType) < imageSize;
		DFEVar is_tick_odd = KernelMath.modulo(tick, 2);

		// Stall input if not the input layer(s)
		DFEVar spikeInput = io.input("spikeInput", dfeFloat(16, 48), is_input_layer);

		DFEVar branch_idx = KernelMath.modulo(neuron_idx, vectorSize);
		DFEVar address_idx = (neuron_idx - branch_idx) / vectorSize;

		List<DFEVar> gather_vector = new ArrayList<DFEVar>();
		for(int i = 0; i < vectorSize; i++){ gather_vector.add(gather1.get(i).read(address_idx)); }
		DFEVar gather_value = control.mux(branch_idx, gather_vector);
		//Memory<DFEVar> now = control.mux(select, gather1);

		//mem.

		DFEVar last_gather = is_tick_odd === 0 ? gather1.read(neuron_idx) : gather2.read(neuron_idx);

		DFEVar v_n = is_input_layer ? spikeInput.cast(bramType) : V.read(neuron_idx) + last_gather;
		// TODO: test the loop offset here.
		V.write(stream.offset(neuron_idx, -2), v_n, constant.var(true)); // we may use pulse here.

		DFEVar is_fire = v_n > v_threshold ? constant.var(true) : constant.var(false) ;

		DFEVar is_output_layer = neuron_idx.cast(uintType) >= neuronNum - classNum;
		DFEVar spikeOutput = is_fire.cast(uintType);

		io.output("spikeOutput", spikeOutput, uintType, is_output_layer);

		CircularBuffer buffer = new CircularBuffer(this, maxNeuronNum, addressType); // The safe size

		buffer.push(is_fire, neuron_idx);

		DFEVar fired_neuron_idx = buffer.pop(constant.var(true)); // Out put 0 if buffer is empty. Shall we stop the pop when the rows are not finished?

		// Here we have to keep all those values, and that is tricky.
		DFEVar row_begin_idx = rowInTable.read(fired_neuron_idx);
		DFEVar row_end_idx = rowInTable.read(fired_neuron_idx + 1);
		DFEVar burst_count = row_end_idx - row_begin_idx;

		/*
		Count.Params paramsForTableRead = control.count.makeParams(32)
													   .withMax(row_end_idx)
													   .withWrapMode(WrapMode.COUNT_LT_MAX_THEN_WRAP);
		Counter row_counter = control.count.makeCounter(paramsForTableRead);
		DFEVar row_idx = row_counter.getCount();
		 */
		DFEVectorType<DFEVar> tableVectorType = new DFEVectorType<DFEVar>(dfeRawBits(8), vectorSize * 2);

		DFEVector<DFEVar> row_in = io.input("row_in", tableVectorType, control.count.pulse(2, false)); // this delay is enough for any size

		LMemCommandStream.makeKernelOutput("AcmdStream",
											constant.var(true),                // control
											row_begin_idx,             // address
											burst_count,       // size, we could read multiple burst.
											constant.var(dfeUInt(7), 1),       // inc
											constant.var(dfeUInt(1), 0),       // stream
											constant.var(true));
		for ( int i = 0; i < vectorSize; i++){
			DFEVar target_idx = row_in[ i * 2].cast(addressType);
			DFEVar target_weight = row_in[ i * 2 + 1 ]
		}
		// for large table 4GB * burst

		//MOVE gather1 data to gather2, how?

/*
		DFEVar enable_input = rom.read(count.cast(dfeUInt(7)));
		DFEVar inB = inB_double.cast(dfeUInt(32));
		//DFEVar inB = mappedRom.read(count.cast(dfeUInt(7)));

		//DFEVar inA = io.input("inA", dfeUInt(32));

		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeInt(32), vectorSize);

		DFEVector<DFEVar> inA = io.input("inA", vectorType, control.count.pulse(2, false));
		DFEVector<DFEVar> inA2 = stream.offset(inA, -2);

//		DFEVar totalBursts = io.scalarInput("totalBursts",dfeUInt(32));
//		DFEVar wordsPerBurst = io.scalarInput("wordsPerBurst",dfeUInt(32));
//		DFEVar row_num = io.scalarInput("row_num", dfeUInt(32));


		//CounterChain chain = control.count.makeCounterChain();
		//DFEVar burstCount = chain.addCounter(100, 1);
		//DFEVar wordCount = chain.addCounter(96, 1);

		inB.simWatch("inB");
		inA2.simWatch("inA2");
		////debug.dfePrintf("vectorSize %d, ", vectorSize); // vectorSize is not visible

		CircularBuffer buffer = new CircularBuffer(this, 8, dfeUInt(32));
		buffer.push(constant.var(true), inB);
		//DFEVar inA_address = buffer.pop(constant.var(true));
		DFEVar inA_address = buffer.pop( count > 1 );

		//DFEVar inB_add = stream.offset(inB, 2);//inB.cast(dfeUInt(28));
		//inB_add.simWatch("inB_add");
		//DFEVar inB_eq_count = inB.eq(count);
		//inB_eq_count.simWatch("inB_eq_count");

		LMemCommandStream.makeKernelOutput("AcmdStream",
				//wordCount === 0,
				constant.var(true),                // control
				//inB > 0,
				//inB_add,
				inB,
				//inB.cast(dfeUInt(28)),             // address
				//burstCount,
				//count+40,
				//count,
				//count > 0 ? inB : count,
				//inA_address,
				constant.var(dfeUInt(8), 1),       // size
				constant.var(dfeUInt(7), 0),       // inc
				constant.var(dfeUInt(1), 0),       // stream
				constant.var(true)); // Shall we ? Use false?
		/*
		LMemCommandStream.makeKernelOutput("BcmdStream",
				wordCount === 0,                 // control
				//wordCount >= 0,
				totalBursts + burstCount,        // address
				constant.var(dfeUInt(8), 1),      // size
				constant.var(dfeUInt(1), 0),      // inc
				constant.var(dfeUInt(1), 0),      // stream
				constant.var(false));
		*/
		/*
		LMemCommandStream.makeKernelOutput("OcmdStream",
				count >= 0,                  // control
				row_num + count,     // address
				constant.var(dfeUInt(8), 1),       // size
				constant.var(dfeUInt(1), 0),       // inc
				constant.var(dfeUInt(1), 0),       // stream
				count === (totalBursts - 1));
		*/
		/*
		DFEVector<DFEVar> outputVector =
			vectorType.newInstance(this);
		for(int i = 0; i < vectorSize; i++){

		}*/
/*
		DFEVar result = inA2[0];
		//DFEVar result = inB.cast(dfeInt(32));
		//io.output("oData", inA[0], dfeUInt(32));
		io.output("oData", result, dfeInt(32));//, control.count.pulse(2, false));
*/
	}
}
